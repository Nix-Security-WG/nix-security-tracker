# Generated by Django 4.2.7 on 2023-12-20 18:13

from django.db import migrations, models
import django.db.models.deletion
import pgtrigger.compiler
import pgtrigger.migrations


class Migration(migrations.Migration):

    dependencies = [
        ('pghistory', '0006_delete_aggregateevent'),
        ('shared', '0024_alter_nixlicense_unique_together_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='NixpkgsIssueCveLog',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NixpkgsIssueDerivationsLog',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NixpkgsIssueLog',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('status', models.CharField(choices=[('U', 'unknown'), ('A', 'affected'), ('NA', 'notaffected'), ('O', 'notforus'), ('W', 'wontfix')], default='U', max_length=2)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NixpkgsIssueCve',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('shared.nixpkgsissue_cve',),
        ),
        migrations.CreateModel(
            name='NixpkgsIssueDerivation',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('shared.nixpkgsissue_derivations',),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='nixpkgsissue',
            trigger=pgtrigger.compiler.Trigger(name='insert_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "shared_nixpkgsissuelog" ("pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "status") VALUES (_pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."status"); RETURN NULL;', hash='8002f5bc33eb552273a9f75cc973fec1db546fb1', operation='INSERT', pgid='pgtrigger_insert_insert_9d8a7', table='shared_nixpkgsissue', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='nixpkgsissue',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD."status" IS DISTINCT FROM (NEW."status"))', func='INSERT INTO "shared_nixpkgsissuelog" ("pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "status") VALUES (_pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."status"); RETURN NULL;', hash='ee77b626a75eda1a7e7cb0285018a2ef2084e146', operation='UPDATE', pgid='pgtrigger_update_update_8088b', table='shared_nixpkgsissue', when='AFTER')),
        ),
        migrations.AddField(
            model_name='nixpkgsissuelog',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='nixpkgsissuelog',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='status_events', to='shared.nixpkgsissue'),
        ),
        migrations.AddField(
            model_name='nixpkgsissuederivationslog',
            name='nixderivation',
            field=models.ForeignKey(db_constraint=False, db_tablespace='', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='shared.nixderivation'),
        ),
        migrations.AddField(
            model_name='nixpkgsissuederivationslog',
            name='nixpkgsissue',
            field=models.ForeignKey(db_constraint=False, db_tablespace='', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='shared.nixpkgsissue'),
        ),
        migrations.AddField(
            model_name='nixpkgsissuederivationslog',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='nixpkgsissuederivationslog',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='shared.nixpkgsissuederivation'),
        ),
        migrations.AddField(
            model_name='nixpkgsissuecvelog',
            name='cverecord',
            field=models.ForeignKey(db_constraint=False, db_tablespace='', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='shared.cverecord'),
        ),
        migrations.AddField(
            model_name='nixpkgsissuecvelog',
            name='nixpkgsissue',
            field=models.ForeignKey(db_constraint=False, db_tablespace='', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='shared.nixpkgsissue'),
        ),
        migrations.AddField(
            model_name='nixpkgsissuecvelog',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='nixpkgsissuecvelog',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='shared.nixpkgsissuecve'),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='nixpkgsissuecve',
            trigger=pgtrigger.compiler.Trigger(name='cve_add_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "shared_nixpkgsissuecvelog" ("cverecord_id", "id", "nixpkgsissue_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") VALUES (NEW."cverecord_id", NEW."id", NEW."nixpkgsissue_id", _pgh_attach_context(), NOW(), \'cve.add\', NEW."id"); RETURN NULL;', hash='6ef7559aff1e530f0d6f45c1f00b04274ccbabde', operation='INSERT', pgid='pgtrigger_cve_add_insert_ec090', table='shared_nixpkgsissue_cve', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='nixpkgsissuecve',
            trigger=pgtrigger.compiler.Trigger(name='cve_remove_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "shared_nixpkgsissuecvelog" ("cverecord_id", "id", "nixpkgsissue_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") VALUES (OLD."cverecord_id", OLD."id", OLD."nixpkgsissue_id", _pgh_attach_context(), NOW(), \'cve.remove\', OLD."id"); RETURN NULL;', hash='82fe9428a10a70fbe7eb0d5dae0a75837eea1a43', operation='DELETE', pgid='pgtrigger_cve_remove_delete_ddeea', table='shared_nixpkgsissue_cve', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='nixpkgsissuederivation',
            trigger=pgtrigger.compiler.Trigger(name='derivations_add_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "shared_nixpkgsissuederivationslog" ("id", "nixderivation_id", "nixpkgsissue_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") VALUES (NEW."id", NEW."nixderivation_id", NEW."nixpkgsissue_id", _pgh_attach_context(), NOW(), \'derivations.add\', NEW."id"); RETURN NULL;', hash='c09082f99b3198af58f27bd6e6d7cd03a09d3c53', operation='INSERT', pgid='pgtrigger_derivations_add_insert_7887c', table='shared_nixpkgsissue_derivations', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='nixpkgsissuederivation',
            trigger=pgtrigger.compiler.Trigger(name='derivations_remove_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "shared_nixpkgsissuederivationslog" ("id", "nixderivation_id", "nixpkgsissue_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") VALUES (OLD."id", OLD."nixderivation_id", OLD."nixpkgsissue_id", _pgh_attach_context(), NOW(), \'derivations.remove\', OLD."id"); RETURN NULL;', hash='6a50f3e7005bca78e2253daedaa2eb1cd703fa77', operation='DELETE', pgid='pgtrigger_derivations_remove_delete_e0081', table='shared_nixpkgsissue_derivations', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='nixpkgsissuelog',
            trigger=pgtrigger.compiler.Trigger(name='append_only', sql=pgtrigger.compiler.UpsertTriggerSql(func="RAISE EXCEPTION 'pgtrigger: Cannot update or delete rows from % table', TG_TABLE_NAME;", hash='bd2252f3dd072bd1cea269c9c6294651286b6df4', operation='UPDATE OR DELETE', pgid='pgtrigger_append_only_28850', table='shared_nixpkgsissuelog', when='BEFORE')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='nixpkgsissuederivationslog',
            trigger=pgtrigger.compiler.Trigger(name='append_only', sql=pgtrigger.compiler.UpsertTriggerSql(func="RAISE EXCEPTION 'pgtrigger: Cannot update or delete rows from % table', TG_TABLE_NAME;", hash='5ed785a7727772f0da3d0b82217c09246301d90e', operation='UPDATE OR DELETE', pgid='pgtrigger_append_only_bfa86', table='shared_nixpkgsissuederivationslog', when='BEFORE')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='nixpkgsissuecvelog',
            trigger=pgtrigger.compiler.Trigger(name='append_only', sql=pgtrigger.compiler.UpsertTriggerSql(func="RAISE EXCEPTION 'pgtrigger: Cannot update or delete rows from % table', TG_TABLE_NAME;", hash='64f1c91b9a65ca44ccd7a7fbc00071a73cfed1dd', operation='UPDATE OR DELETE', pgid='pgtrigger_append_only_39252', table='shared_nixpkgsissuecvelog', when='BEFORE')),
        ),
    ]
